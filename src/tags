!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BEGIN_WITH	utils.h	13;"	d
CFGHOMENAME	config.h	13;"	d
CFGNAME	weather.c	27;"	d	file:
CFG_MAP	config.h	/^	CFG_MAP(XX)$/;"	e	enum:cfg_keys
CFG_MAP	config.h	15;"	d
CFG_UNKNOW	config.h	/^    	CFG_UNKNOW$/;"	e	enum:cfg_keys
CONFIG_H	config.h	11;"	d
UTILS_H	utils.h	11;"	d
WEATHER_API	weather.c	29;"	d	file:
WEATHER_DEF_ICON	weather.c	32;"	d	file:
WEATHER_DEF_TEXT	weather.c	33;"	d	file:
WEATHER_DEF_TMP	weather.c	34;"	d	file:
WEATHER_FMT_TEXT	weather.c	35;"	d	file:
WEATHER_RES	weather.c	31;"	d	file:
WEATHER_XML	weather.c	28;"	d	file:
XX	config.h	24;"	d
XX	config.h	26;"	d
XX	weather.c	56;"	d	file:
XX	weather.c	58;"	d	file:
cfg	config.h	/^struct cfg$/;"	s
cfg::cfgkey	config.h	/^        enum cfg_keys cfgkey;$/;"	m	struct:cfg	typeref:enum:cfg::cfg_keys	access:public
cfg::name	config.h	/^        char *name;$/;"	m	struct:cfg	access:public
cfg::value	config.h	/^        char *value;$/;"	m	struct:cfg	access:public
cfg_keys	config.h	/^enum cfg_keys$/;"	g
cfg_load	config.c	/^void cfg_load(const char *filename, struct cfg **rc)$/;"	f	signature:(const char *filename, struct cfg **rc)
cfg_load	config.h	/^void cfg_load(const char *filename, struct cfg **rc);$/;"	p	signature:(const char *filename, struct cfg **rc)
cfg_parse	config.c	/^const char *cfg_parse(enum cfg_keys key, const struct cfg **rc)$/;"	f	signature:(enum cfg_keys key, const struct cfg **rc)
cfg_parse	config.h	/^const char *cfg_parse(enum cfg_keys cfg_key, const struct cfg **rc);$/;"	p	signature:(enum cfg_keys cfg_key, const struct cfg **rc)
cfgkey	config.h	/^        enum cfg_keys cfgkey;$/;"	m	struct:cfg	typeref:enum:cfg::cfg_keys	access:public
day	weather.c	/^	struct info *day;$/;"	m	struct:weather	typeref:struct:weather::info	file:	access:public
die	utils.c	/^void die(const char *format, ...)$/;"	f	signature:(const char *format, ...)
die	utils.h	/^void die(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
icon	weather.c	/^	char icon[16];$/;"	m	struct:info	file:	access:public
id	weather.c	/^	unsigned int id;$/;"	m	struct:weather	file:	access:public
info	weather.c	/^struct info$/;"	s	file:
info::icon	weather.c	/^	char icon[16];$/;"	m	struct:info	file:	access:public
info::name	weather.c	/^	char name[16];$/;"	m	struct:info	file:	access:public
info::temperature	weather.c	/^	int temperature;$/;"	m	struct:info	file:	access:public
main	weather.c	/^int main(int argc, const char **argv)$/;"	f	signature:(int argc, const char **argv)
mkpos	config.c	/^struct position *mkpos(const char *text, struct position *pos)$/;"	f	signature:(const char *text, struct position *pos)
mkpos	config.h	/^struct position *mkpos(const char *text, struct position *pos);$/;"	p	signature:(const char *text, struct position *pos)
name	config.h	/^        char *name;$/;"	m	struct:cfg	access:public
name	weather.c	/^	char name[16];$/;"	m	struct:info	file:	access:public
next	weather.c	/^	struct weather *next;$/;"	m	struct:weather	typeref:struct:weather::weather	file:	access:public
position	config.h	/^struct position$/;"	s
position::x	config.h	/^	int x;$/;"	m	struct:position	access:public
position::y	config.h	/^	int y;$/;"	m	struct:position	access:public
rc	weather.c	/^static struct cfg rc[] = $/;"	v	typeref:struct:cfg	file:
temperature	weather.c	/^	int temperature;$/;"	m	struct:info	file:	access:public
trim	utils.c	/^char *trim(char *str)$/;"	f	signature:(char *str)
trim	utils.h	/^char *trim(char *str);$/;"	p	signature:(char *str)
ui_do_transparent	weather.c	/^static int ui_do_transparent(GtkWidget *widget, GdkEventExpose *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventExpose *event, void *data)
ui_do_transparent	weather.c	/^static int ui_do_transparent(GtkWidget *widget, GdkEventExpose *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventExpose *event, void *data)
ui_set_transparent	weather.c	/^static int ui_set_transparent(GtkWidget *widget, GdkScreen *ignore, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkScreen *ignore, void *data)
ui_set_transparent	weather.c	/^static int ui_set_transparent(GtkWidget *widget, GdkScreen *ignore, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkScreen *ignore, void *data)
value	config.h	/^        char *value;$/;"	m	struct:cfg	access:public
weather	weather.c	/^struct weather$/;"	s	file:
weather::day	weather.c	/^	struct info *day;$/;"	m	struct:weather	typeref:struct:weather::info	file:	access:public
weather::id	weather.c	/^	unsigned int id;$/;"	m	struct:weather	file:	access:public
weather::next	weather.c	/^	struct weather *next;$/;"	m	struct:weather	typeref:struct:weather::weather	file:	access:public
weather_init	weather.c	/^static void weather_init()$/;"	f	file:
weather_load	weather.c	/^static xmlDoc *weather_load()$/;"	f	file:
weather_load	weather.c	/^static xmlDoc *weather_load();$/;"	p	file:
weather_query	weather.c	/^static struct weather_info *weather_query(struct weather_info *info, unsigned int day, xmlDoc *doc)$/;"	f	file:	signature:(struct weather_info *info, unsigned int day, xmlDoc *doc)
weather_query	weather.c	/^static struct weather_info *weather_query(struct weather_info *info, unsigned int day, xmlDoc *doc);$/;"	p	file:	signature:(struct weather_info *info, unsigned int day, xmlDoc *doc)
weather_query_node	weather.c	/^static xmlNode *weather_query_node(xmlNode *root, char *node_name, char *attr_name, unsigned int day)$/;"	f	file:	signature:(xmlNode *root, char *node_name, char *attr_name, unsigned int day)
weather_refresh	weather.c	/^static void weather_refresh()$/;"	f	file:
weather_refresh	weather.c	/^static void weather_refresh();$/;"	p	file:
weather_ui	weather.c	/^static void weather_ui();$/;"	p	file:
write_data	weather.c	/^static size_t write_data(void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f	file:	signature:(void *ptr, size_t size, size_t nmemb, FILE *stream)
write_data	weather.c	/^static size_t write_data(void *ptr, size_t size, size_t nmemb, FILE *stream);$/;"	p	file:	signature:(void *ptr, size_t size, size_t nmemb, FILE *stream)
x	config.h	/^	int x;$/;"	m	struct:position	access:public
y	config.h	/^	int y;$/;"	m	struct:position	access:public
